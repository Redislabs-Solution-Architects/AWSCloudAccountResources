AWSTemplateFormatVersion: 2010-09-09
Description: |
  A template to construct all the necessary resources to enable
  RedisCloud to manage clusters in your AWS account, as per
  https://docs.redislabs.com/latest/rc/how-to/creating-aws-user-redis-enterprise-vpc/,
  which are to be used to construct a RedisLabs account as per https://docs.redislabs.com/latest/rc/how-to/view-edit-cloud-account/

  This will construct:
  + An instance role and profile named 'RedisLabsInstanceRolePolicy'
  + A user named 'redislabs-user' with an access key
  + A role named 'redislabs-role' granting AWS console access with MFA to the RedisLabs AWS account

  This stack will output the following:
  + an AWS_ACCESS_KEY_ID for the user 'redislabs-user'
  + An AWS_SECRET_ACCESS_KEY for the user 'redislabs-user'
  + The 'redislabs-role' name
    
Resources:
  RedisLabsClusterNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role used by EC2 instances managed by RedisLabs
      ManagedPolicyArns:
        - !Ref RedisLabsInstanceRolePolicy
      RoleName: redislabs-cluster-node-role
      Tags:
        - Key: UsedBy
          Value: RedisLabs

  RedisLabsClusterNodeRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: RedisLabsClusterNodeRole
    Properties:
      InstanceProfileName: redislabs-cluster-node-role
      Roles:
        - redislabs-cluster-node-role


  RedisLabsInstanceRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Instance role policy used by Redislabs for its cluster members
      ManagedPolicyName: RedisLabsInstanceRolePolicy
      PolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EC2",
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeRegions",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes"
              ],
              "Resource": "*"
            },
            {
              "Sid": "EC2Tagged",
              "Effect": "Allow",
              "Action": [
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:DeleteSecurityGroup",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "ec2:ResourceTag/RedisLabsIdentifier": "Redislabs-VPC"
                }
              }
            },
            {
              "Sid": "EBSVolumeActions",
              "Effect": "Allow",
              "Action": [
                "ec2:AttachVolume",
                "ec2:CreateVolume",
                "ec2:CreateTags",
                "ec2:DescribeTags"
              ],
              "Resource": "*"
            },
            {
              "Sid": "S3Object",
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:DeleteObject",
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": "*"
            },
            {
              "Sid": "IAM",
              "Effect": "Allow",
              "Action": [
                "iam:GetPolicy",
                "iam:ListPolicies"
              ],
              "Resource": "*"
            }
          ]
        }

  RedislabsIAMUserRestrictedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Policy used by RedisLabs users
      ManagedPolicyName: RedislabsIAMUserRestrictedPolicy
      PolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "Ec2DescribeAll",
                  "Effect": "Allow",
                  "Action": "ec2:Describe*",
                  "Resource": "*"
              },
              {
                  "Sid": "CloudWatchReadOnly",
                  "Effect": "Allow",
                  "Action": [
                      "cloudwatch:Describe*",
                      "cloudwatch:Get*",
                      "cloudwatch:List*"
                  ],
                  "Resource": "*"
              },
              {
                  "Sid": "IamUserOperations",
                  "Effect": "Allow",
                  "Action": [
                      "iam:GetUser",
                      "iam:GetUserPolicy",
                      "iam:ChangePassword"
                  ],
                  "Resource": "arn:aws:iam::*:user/${aws:username}"
              },
              {
                  "Sid": "RolePolicyUserReadActions",
                  "Action": [
                      "iam:GetRole",
                      "iam:GetPolicy",
                      "iam:ListUsers",
                      "iam:ListPolicies",
                      "iam:ListRolePolicies",
                      "iam:ListAttachedRolePolicies",
                      "iam:ListInstanceProfiles",
                      "iam:ListInstanceProfilesForRole",
                      "iam:SimulatePrincipalPolicy"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
              },
              {
                  "Sid": "KeyPairActions",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:CreateKeyPair",
                      "ec2:DeleteKeyPair",
                      "ec2:ImportKeyPair"
                  ],
                  "Resource": "*"
              },
              {
                  "Sid": "CreateInstancesVolumesAndTags",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:CreateVolume",
                      "ec2:AttachVolume",
                      "ec2:StartInstances",
                      "ec2:RunInstances",
                      "ec2:CreateTags"
                  ],
                  "Resource": "*"
              },
              {
                  "Sid": "PassRlClusterNodeRole",
                  "Effect": "Allow",
                  "Action": "iam:PassRole",
                  "Resource": "arn:aws:iam::*:role/redislabs-cluster-node-role"
              },
              {
                  "Sid": "NetworkAccess",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:*Vpc*",
                      "ec2:*VpcPeering*",
                      "ec2:*Subnet*",
                      "ec2:*Gateway*",
                      "ec2:*Vpn*",
                      "ec2:*Route*",
                      "ec2:*Address*",
                      "ec2:*SecurityGroup*",
                      "ec2:*NetworkAcl*",
                      "ec2:*DhcpOptions*"
                  ],
                  "Resource": "*"
              },
              {
                  "Sid": "DeleteInstancesVolumesAndTagsWithIdentiferTag",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:RebootInstances",
                      "ec2:StopInstances",
                      "ec2:TerminateInstances",
                      "ec2:DeleteVolume",
                      "ec2:DetachVolume",
                      "ec2:DeleteTags"
                  ],
                  "Resource": "*",
                  "Condition": {
                      "StringEquals": {
                          "ec2:ResourceTag/RedisLabsIdentifier": "Redislabs-VPC"
                      }
                  }
              },
              {
                  "Sid": "Support",
                  "Effect": "Allow",
                  "Action": "support:*",
                  "Resource": "*"
              }
          ]
        }
  RedisLabsUserPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: Redis Labs User Password
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "password"
        PasswordLength: 30
                
  RedisLabsUser:
    Type: "AWS::IAM::User"
    Properties:
      LoginProfile:
        Password: !Sub '{{resolve:secretsmanager:${RedisLabsUserPassword}:SecretString:password}}'
      ManagedPolicyArns:
        - !Ref RedislabsIAMUserRestrictedPolicy
      Tags:
        - Key: UsedBy
          Value: RedisLabs
      UserName: redislabs-user
        
  RedisLabsUserAccessKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: !Ref RedisLabsUser

  RedisLabsCrossAccountRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::168085023892:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "Bool": {
                  "aws:MultiFactorAuthPresent": "true"
                }
              }
            }
          ]
        }
      Description: String
      ManagedPolicyArns:
        - !Ref RedislabsIAMUserRestrictedPolicy
      RoleName: redislabs-role
      Tags:
        - Key: UsedBy
          Value: RedisLabs
  
Outputs:
  AwsSecretAccessKey:
    Description: The AWS secret access key for the user named 'redislabs-user' 
    Value: !Sub ${RedisLabsUserAccessKey.SecretAccessKey}
  AwsAccessKey:
    Description: The AWS access key for the user named 'redislabs-user'
    Value: !Sub ${RedisLabsUserAccessKey}
  IamRoleName:
    Description: The name of the console role with access to the console
    Value: !Ref RedisLabsCrossAccountRole
  RedisLabsUserPassword:
    Description: Login password for Redis Labs User
    Value: !Sub '{{resolve:secretsmanager:${RedisLabsUserPassword}:SecretString:password}}'
  ConsoleLoginUrl:
    Description: The URL to be used to login to the account
    Value: !Sub 'https://${AWS::AccountId}.signin.aws.amazon.com/console'
  
